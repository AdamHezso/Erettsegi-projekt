// Kiírja a konzolra, hogy a szerver elindult
console.log("Fut a szerver.")

// Szükséges modulok betöltése
const express = require('express') // Express.js keretrendszer HTTP szerverhez
const dbHandler = require('./dbHandler') // Adatbázis kezelő modul
const { alkatresz } = require('./dbHandler') // Alkatrész tábla modell
const { felhasznalo } = require('./dbHandler') // Felhasználó tábla modell
require('dotenv').config() // Környezeti változók betöltése .env fájlból
const jwt = require('jsonwebtoken') // JSON Web Token hitelesítéshez
const cors = require('cors') // Cross-Origin Resource Sharing engedélyezése

// Szerver példány létrehozása
const server = express()
server.use(express.json()) // JSON body-k feldolgozása
server.use(cors()) // CORS engedélyezése minden domainre

// Környezeti változók beolvasása
const TITOK = process.env.SECRET // JWT titkos kulcs
const PORT = process.env.PORT // Port, amin a szerver futni fog

// Adatbázis szinkronizálása az aktuális modellek alapján
dbHandler.alkatresz.sync({alter:true})
dbHandler.felhasznalo.sync({alter:true})

// Hitelesítést végző middleware
function auth(){
    return(req,res,next) => {
        const aUTHh = req.headers.authorization
        if(typeof(aUTHh) == 'undefined'){ // Token hiányzik
            res.status(401)
            res.json({'message':'Nem létező token'})
            res.end()
            return
        }
        if(!aUTHh.startsWith('Bearer')){ // Token formátum hibás
            res.status(401)
            res.json({'message':'Hibás token'})
            res.end()
            return
        }
        const encodedToken = aUTHh.split(' ')[1] // Token kivétele a Bearer után
        try{
            const decodedToken = jwt.verify(encodedToken, TITOK) // Token dekódolása
            req.userName = decodedToken.felnev // Felhasználónév elmentése a kéréshez
            req.userId = decodedToken.id // Felhasználó ID elmentése a kéréshez
            next() // Tovább a következő middleware-re
        }catch(error){
            res.json({'message':error}) // Token hibás
            res.end()
        }
    }
}

// Összes alkatrész lekérdezése (GET /parts)
server.get('/parts', async (req, res) => {
    try {
        const all = await dbHandler.alkatresz.findAll({
            attributes: ["nev","id","ar","raktarkeszlet"],
            distinct: true
        })
        res.json(all)
    } catch (error) {
        res.json({'message':error})
    }
    res.end()
})

// Felhasználó regisztrálása (POST /register) — védett útvonal (auth())
server.post('/register',auth(), async (req, res) => {
    let oneUser
    try{
        oneUser = await dbHandler.felhasznalo.findOne({
            where:{
                felnev: req.body.registerName
            }
        })
    }catch(error){
        res.json({'message':error})
        console.log(error)
        res.end()
        return
    }

    // Ha már létezik ilyen felhasználó
    if(oneUser){
        res.status(403)
        res.json({'message': 'Ilyen felhasználó már van.'})
        res.end()
        return
    }

    // Új felhasználó létrehozása
    try {
        await dbHandler.felhasznalo.create({
            felnev: req.body.registerName,
            jelszo: req.body.registerPassword
        })
    } catch (error) {
        await res.json({'message':error})
        console.log(error)
        res.end()
        return
    }

    res.status(201)
    res.json({'message':'Sikeres regisztráció'})
    res.end()
})

// Felhasználó bejelentkezése (POST /login)
server.post('/login', async (req, res) => {
    let oneUser
    try{
        oneUser = await dbHandler.felhasznalo.findOne({
            where:{
                felnev: req.body.loginName,
                jelszo: req.body.loginPassword
            }
        })
    }catch(error){
        res.json({'message':error})
        console.log(error)
        res.end()
        return
    }

    // Ha a felhasználó létezik, JWT tokent adunk vissza
    if(oneUser){
        try{
            const token = await jwt.sign({'nev':oneUser.felnev,'id':oneUser.id},TITOK,{expiresIn:'1h'})
            res.json({'message':'Sikeres bejelentkezés'}) // FIGYELEM: nem adja vissza a tokent!
            res.end()
            return
        }catch(error){
            res.json({'message':error})
            console.log(error)
            res.end()
            return
        }
    }

    // Hibás belépési adatok
    res.status(409)
    res.json({'message':'Hibás felhasználónév vagy jelszó'})
    res.end()
})

// Alkatrész törlése ID alapján (DELETE /parts/:id)
server.delete('/parts/:id', async (req, res) => {
    const id = req.params.id; 
    try {
        const part = await alkatresz.findByPk(id);
        if (!part) {
            return res.status(404).send('Item not found');
        }
        await part.destroy();
        res.status(200).send('Item deleted successfully');
    } catch (err) {
        console.error('Error deleting item:', err);
        res.status(500).send('Internal Server Error');
    }
})

// Új alkatrész hozzáadása (POST /parts)
server.post('/parts', async (req, res) => {
    const { nev, ar, raktarkeszlet } = req.body;
    try {
        const newPart = await alkatresz.create({ nev, ar, raktarkeszlet });
        res.status(201).send(newPart);
    } catch (err) {
        console.error('Error adding item:', err);
        res.status(500).send('Internal Server Error');
    }
})

// Szerver indítása a megadott porton
server.listen(PORT, () => {
    console.log('A szerverunk elkezdett futni a ' + PORT + ' címen')
})
